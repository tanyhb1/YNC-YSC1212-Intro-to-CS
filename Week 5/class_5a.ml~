(*Class 5A*)

let foo a b c = a * b * c;;

(*corect way to read definition of function ??? *)
(* int -> (int -> (int -> int)) *)

let foo =
  fun a ->(
  fun b ->(
  fun c -> a + b * c));;

let bar = foo 7;;
let gar = bar 3;;

gar 10;;
(* gar 10 = bar 3 10 = foo 7 3 10 = 7 + 3 * 10 *)


let bar b c = foo 7 b c;;

let mypair = fun b -> if b then 1 else 3;;

mypair false;;
mypair true;;

let mkpair a b = (fun t -> if t then b else a);;

let fst p = p false;;
let snd p = p true;;

let addpair p1 p2 =
  mkpair (fst p1 + fst p2) (snd p1 + snd p2);;

let mypair = addpair (mkpair 2 3) (mkpair 4 5);;
fst mypair;;
snd mypair;;

let addpair' pp =
  mkpair (fst (fst pp) + fst (snd pp)) (snd (fst pp) + snd (snd pp));;

let pair1 = mkpair 2 3;;
let pair2 = mkpair 4 5;;
let pairpair = mkpair pair1 pair2;;
let sumpair = addpair' pairpair;;


(* partially applied function *)

let add a b = a + b;;

let rec map f l =
  match l with
  | [] -> []
  | h :: t -> (f h) :: map f t;;

map (add 7) [3;4;5];;

let coordinate = (3,5);;
let triple = (3,5, true);;

let addpair p1 p2 =
  match p1 with
    (x1,y1) -> match p2 with
                 (x2,y2) -> (x1+x2, y1+y2);;

let addpair p1 p2=
  match p1, p2 with
    (x1, y1), (x2, y2) -> (x1+x2, y1+y2);;

(* list of pairs *)
[(2,3); (4,5); (7,10)];;
(* pair of lists *)
([2;4;7], [3;5;10]);;

let fst p = match p with (a, _) -> a;;
let snd p = match p with (_, b) -> b;;

fst(2,3,4);;
fst(2,(3,4));;
fst((2,3),4);;

(* stack data structure *)
(* pop, push, peek *)

let push x s = x::s;;
let pop l =
  match l with
  | h :: _ -> h
  | [] -> raise Not_found;;
let is_empty l =
  match l with
  | [] -> true
  | _ -> false;;

(* implementing a stack in an algorithm *)

let rec string_eq s1 s2 =
  match s1, s2 with
  | [], [] -> true
  | h1 :: t1, h2 :: t2 -> (h1 = h2) && string_eq t1 t2
  | _, _ -> false;;

