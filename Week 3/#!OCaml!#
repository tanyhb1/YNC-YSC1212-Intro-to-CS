        OCaml version 4.06.0

# let rec take n l =
  if n = 0 then [] else
    match l with
    | [] -> []
    | x :: xs -> x :: take (n - 1) xs;;
        val take : int -> 'a list -> 'a list = <fun>
# let rec drop n l =
  if n = 0 then l else
    match l with
    | [] -> []
    | x :: xs -> drop (n - 1) xs;;
        val drop : int -> 'a list -> 'a list = <fun>
# let length l =
  let rec helper l acc = 
    match l with
    | [] -> acc
    | x :: xs -> helper xs (acc + 1)
  in helper l 0;;
          val length : 'a list -> int = <fun>
# let rec f_duplicates x y =
  match x, y with
  | [], [] -> []
  | [], l -> l           
  | l, [] -> l
  | hx :: tx, hy :: ty -> if hx < hy then hx :: f_duplicates tx (hy :: ty)
                          else if hx > hy then hy :: f_duplicates (hx :: tx) ty
                          else hx :: f_duplicates tx ty;;
              val f_duplicates : 'a list -> 'a list -> 'a list = <fun>
# let rec remove_duplicates l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ ->
     let len = (length l)/2 in
     let left = take len l in
     let right = drop len l in
     f_duplicates (remove_duplicates left) (remove_duplicates right);;
                val remove_duplicates : 'a list -> 'a list = <fun>
# let rec select n l =
  let lst = remove_duplicates l in
  match lst with
  | x :: xs -> if n = 0 then x
               else select (n - 1) (xs);;
        Characters 58-143:
  ..match lst with
    | x :: xs -> if n = 0 then x
                 else select (n - 1) (xs)..
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val select : int -> 'a list -> 'a = <fun>
# let rec msort l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ -> let len = (length l)/2 in
         let left = take(len) l in
         let right = drop(len) l in
         merge (msort left) (msort right);;
              Characters 176-181:
           merge (msort left) (msort right);;
           ^^^^^
Error: Unbound value merge
# let rec merge x y =
  match x, y with
  | [], l -> l
  | l, [] -> l
  | hx::tx, hy::ty ->
     if hx < hy then hx :: merge tx (hy :: ty)
     else hy :: merge (hx :: tx) ty;;
            val merge : 'a list -> 'a list -> 'a list = <fun>
# let rec select2 n l =
  let lst = msort l in
  match lst with
  | h :: t -> if n = 0 then h
              else select2 (n - 1) t;;
        Characters 34-39:
    let lst = msort l in
              ^^^^^
Error: Unbound value msort
Hint: Did you mean sqrt?
# let rec msort l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ -> let len = (length l)/2 in
         let left = take(len) l in
         let right = drop(len) l in
         merge (msort left) (msort right);;
              val msort : 'a list -> 'a list = <fun>
# let rec select2 n l =
  let lst = msort l in
  match lst with
  | h :: t -> if n = 0 then h
              else select2 (n - 1) t;;
        Characters 47-128:
  ..match lst with
    | h :: t -> if n = 0 then h
                else select2 (n - 1) t..
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val select2 : int -> 'a list -> 'a = <fun>
# let rec take n l =
  if n = 0 then [] else
    match l with
    | [] -> []
    | x :: xs -> x :: take (n - 1) xs;;
        val take : int -> 'a list -> 'a list = <fun>
# let rec drop n l =
  if n = 0 then l else
    match l with
    | [] -> []
    | x :: xs -> drop (n - 1) xs;;
        val drop : int -> 'a list -> 'a list = <fun>
# let length l =
  let rec helper l acc = 
    match l with
    | [] -> acc
    | x :: xs -> helper xs (acc + 1)
  in helper l 0;;
          val length : 'a list -> int = <fun>
# let rec f_duplicates x y =
  match x, y with
  | [], [] -> []
  | [], l -> l           
  | l, [] -> l
  | hx :: tx, hy :: ty -> if hx < hy then hx :: f_duplicates tx (hy :: ty)
                          else if hx > hy then hy :: f_duplicates (hx :: tx) ty
                          else hx :: f_duplicates tx ty;;
              val f_duplicates : 'a list -> 'a list -> 'a list = <fun>
# let rec remove_duplicates l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ ->
     let len = (length l)/2 in
     let left = take len l in
     let right = drop len l in
     f_duplicates (remove_duplicates left) (remove_duplicates right);;
                val remove_duplicates : 'a list -> 'a list = <fun>
# let rec remove_duplicates l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ ->
     let len = (length l)/2 in
     let left = take len l in
     let right = drop len l in
     f_duplicates (remove_duplicates left) (remove_duplicates right);;
                val remove_duplicates : 'a list -> 'a list = <fun>
# let rec remove_duplicates l =
  match l with
  | [] -> []
  | [x] -> [x]
  | _ ->
     let len = (length l)/2 in
     let left = take len l in
     let right = drop len l in
     f_duplicates (remove_duplicates left) (remove_duplicates right);;
                val remove_duplicates : 'a list -> 'a list = <fun>
# remove_duplicates [1;1;3;1;5;3;1;5;17];;
- : int list = [1; 3; 5; 17]
# remove_duplicates [1;1;1;1;1;1;11;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;1;];;
- : int list = [1; 11]
# remove_duplicates [1;2;3;5;1;6;7;2;5;3;4;7;1;2;4;6;7;2;7;1;3;34;1;2;4;12;5;62;3;4;2;1;5;61;];;
- : int list = [1; 2; 3; 4; 5; 6; 7; 12; 34; 61; 62]
# remove_duplicates [1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;1;1;3;1;5;3;1;5;17;];;
- : int list = [1; 3; 5; 17]
# let rec select n l =
  let lst = msort l in
  match lst with
  | h :: t -> if n = 0 then h
              else select (n - 1) t;;
        Characters 46-126:
  ..match lst with
    | h :: t -> if n = 0 then h
                else select (n - 1) t..
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val select : int -> 'a list -> 'a = <fun>
# let rec select n l =
  let lst = msort l in
  match lst with
  | h :: t -> if n = 0 then h
              else select (n - 1) t;;
        Characters 46-126:
  ..match lst with
    | h :: t -> if n = 0 then h
                else select (n - 1) t..
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val select : int -> 'a list -> 'a = <fun>
# select 5 [1;21;8;5;13;2;3;1];;
- : int = 8
# select 12 [1;21;8;5;13;2;3;1;24;25;26;27;28];;
- : int = 28
# select 13
[1;21;8;5;13;2;3;1;24;25;26;27;28];;
  Exception: Match_failure ("//toplevel//", 111, 2).
# 