let min x y = if x < y then x else y;;
let max x y = if x < y then y else x;;

let rec min_max l = match l with
  | []->[]
  | [x] -> [x ; x]
  (* e1 :: t -> match t with
                e2 :: l' -> *)
  | e1 :: (e2 :: l') ->
     match min_max l' with
     | [] -> if e1 < e2 then [e1 ; e2] else [e2; e1]
     | [min_so_far ; max_so_far] ->
        if e1< e2 then [min min_so_far e1; max max_so_far e2]
        else [min min_so_far e2; max max_so_far e1]
     | _ -> [];;


let minmax l = match l with
  | x :: (xs :: xss) -> if xs > x then helper l x xs else helper l xs x
  (* to make it int list...*)
  | x :: [] when x = 0 -> [0; 0]
  | x :: [] -> [x;x]
  | [] -> [];;

        
let rec helper l min max = match l with
  | x :: (xs :: xss) -> if x > xs then (if x > max && xs < min then helper xss xs x
                                             else if x > max then helper xss min x
                                             else if xs < min then helper xss xs max
                                             else helper xss min max)
                        else (if xs > max && x < min then helper xss x xs
                              else if xs > max then helper xss min xs
                              else if x < min then helper xss x max
                              else helper xss min max)
  | x :: [] -> if x > max then (min :: x :: [])
               else if x < min then (x :: max :: [])
               else (min :: max :: [])
  | [] -> (min :: max :: []);;


(* class 3a*)
