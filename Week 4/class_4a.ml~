(* Class 4a *)

let rec doublelist l =
  match l with
  | [] -> []
  | h :: t -> 2 * h :: doublelist t;;

let rec toASCII l =
  match l with
  | [] -> []
  | h :: t -> int_of_char h :: toASCII t ;;

(* 'a -> 'b refers to the general application of f unto h *)
(* this is a general function to map f unto elements of the list *)
(* further abstraction of ^^ *)

let rec map f l =
  match l with
  | [] -> []
  | h :: t -> (f h) :: map f t;;

let double x = 2 * x;;
double 12;;

map double [5;3;1];;
map int_of_char ['h';'e';'l';'l';'o'];;

let rec filter tester lst =
  match lst with
  | [] -> []
  | h :: t -> if tester h then h :: filter tester t else filter tester t;;

let lowercase c =
  int_of_char c >= 97 && int_of_char c <= 122;;

filter lowercase ['h';'e';'L';'L';'o'];;

(* quicksort algorithm *)

let rec partition_lower p l =
  match l with
  | [] -> []
  | h :: t -> if h <= p then h :: partition_lower p t else partition_lower p t;;

let rec partition_upper p l =
  match l with
  | [] -> []
  | h :: t -> if h > p then h :: partition_upper p t else partition_upper p t;;

let rec quicksort l =
  match l with
  | [] -> []
  | p :: t -> let lowers = partition_lower p t in
              let uppers = partition_upper p t in
              let lowers_sorted = quicksort lowers in
              let uppers_sorted = quicksort uppers in
              lowers_sorted @ (p :: uppers_sorted);;

let rec length l = match l with [] -> 0 | _ :: t -> 1 + length t ;;
let rec quickselect l n =
  match l with
  | [] -> (-1)
  | p :: t - > if n = 0 then p else
               let lowers = partition_lower p t in
               let uppers = partition_upper p t in
               let length_lowers = length lowers in
               if inthelowerhalf then quickselect lowers n else quickselect uppers (n - length_lowers)
               
